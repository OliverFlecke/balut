{"version":3,"sources":["Category.ts","styles/colors.ts","styles/table.ts","components/Row.tsx","components/Board.tsx","utils/enums.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Category","darkColors","borderColor","theme","dark","Table","styled","table","Tr","tr","Th","th","Td","td","Row","type","category","useState","values","sum","useMemo","reduce","acc","x","map","value","i","key","contentEditable","e","categories","Object","keys","filter","parseInt","Board","HeaderRow","NameCell","colSpan","App","localStorage","getItem","mode","GlobalStyle","Main","H1","mainStyles","css","main","createGlobalStyle","h1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKAAYA,E,+DAAAA,O,iBAAAA,I,iBAAAA,I,iBAAAA,I,uBAAAA,I,yBAAAA,I,mBAAAA,I,kBAAAA,M,yBCECC,EACJ,OADIA,EAEL,OAFKA,EAGK,OAGLC,EAAcC,IAAM,OAAQ,CACxCC,KAAMH,I,mfCNA,IAAMI,EAAQC,IAAOC,MAAV,KAMLC,EAAKF,IAAOG,GAAV,KACFC,EAAKJ,IAAOK,GAAV,IAEMT,GAGRU,EAAKN,IAAOO,GAAV,IACMX,GCNd,IAAMY,EAAM,SAAC,GAAkC,IAAtBC,EAAqB,EAA/BC,SAA+B,EACxBC,mBAAmB,CAAC,EAAG,EAAG,EAAG,IADL,mBAC7CC,EAD6C,KAE9CC,GAF8C,KAExCC,mBAAQ,kBAAMF,EAAOG,QAAO,SAACC,EAAKC,GAAN,OAAYD,EAAMC,IAAG,KAAI,CAACL,KAElE,OACC,kBAACV,EAAD,KACC,kBAACE,EAAD,KAAKV,EAASe,IACbG,EAAOM,KAAI,SAACC,EAAOC,GAAR,OACX,kBAACd,EAAD,CAAIe,IAAKD,EAAGE,iBAAiB,GACjB,IAAVH,EAAcA,EAAQ,OAGzB,kBAACb,EAAD,KAAa,IAARO,EAAYA,EAAM,IACvB,kBAACP,EAAD,Y,6GChBH,ICD2BiB,EDCrBC,GCDqBD,EDCG7B,ECAtB+B,OAAOC,KAAKH,GACjBI,QAAO,SAACN,GAAD,MAA2B,kBAAXE,EAAEF,MACzBH,KAAI,SAACD,GAAD,OAAOW,SAASX,ODAVY,EAAQ,WACpB,OACC,kBAAC9B,EAAD,KACC,kBAAC,EAAD,MACCyB,EAAWN,KAAI,SAACD,GAAD,OACf,kBAAC,EAAD,CAAKI,IAAKJ,EAAGP,SAAUO,SAMrBa,EAAY,WACjB,OACC,kBAAC5B,EAAD,KACC,kBAAC6B,EAAD,CAAUC,QAAS,GAAnB,UACA,kBAAC1B,EAAD,cACA,kBAACA,EAAD,iBAKGyB,EAAW/B,YAAOM,EAAPN,CAAH,K,2fEQCiC,MA5Bf,WAAgB,IAAD,IACmBtB,mBAAQ,UACxCuB,aAAaC,QAAQ,gBADmB,QACP,QAFpB,mBACPtC,EADO,KAad,OAbc,KAcb,kBAAC,IAAD,CAAeA,MAAO,CAAEuC,KAAMvC,IAC7B,kBAACwC,EAAD,MACA,kBAACC,EAAD,KACC,gCACC,kBAACC,EAAD,eAED,iCACC,kBAAC,EAAD,UASCC,EAAa3C,IAAM,OAAQ,CAChCC,KAAM2C,YAAF,IACiB9C,EACXA,KAIL2C,EAAOtC,IAAO0C,KAAV,IACPF,GAIGH,EAAcM,YAAH,IAMbH,GAIED,EAAKvC,IAAO4C,GAAV,KClDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDkInB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8d26198a.chunk.js","sourcesContent":["export enum Category {\n\tFours,\n\tFives,\n\tSixes,\n\tStraight,\n\tFullHouse,\n\tChoice,\n\tBalut,\n}\n","import theme from 'styled-theming';\n\nexport const darkColors = {\n\tborder: '#CCC',\n\tcolor: '#CCC',\n\tbackgroundColor: '#000',\n};\n\nexport const borderColor = theme('mode', {\n\tdark: darkColors.border,\n});\n","import styled from 'styled-components';\nimport { borderColor } from './colors';\n\nexport const Table = styled.table`\n\tborder-collapse: collapse;\n\twidth: 100%;\n\tmax-width: 760px;\n`;\n\nexport const Tr = styled.tr``;\nexport const Th = styled.th`\n\ttext-align: left;\n\tborder: 1px solid ${borderColor};\n\tpadding: 4px;\n`;\nexport const Td = styled.td`\n\tborder: 1px solid ${borderColor};\n\tpadding: 4px;\n\ttext-align: center;\n\tmin-width: 20px;\n`;\n","import React, { useState, useMemo } from 'react';\nimport { Category } from '../Category';\nimport { Td, Th, Tr } from '../styles/table';\n\ninterface RowProps {\n\tcategory: Category;\n}\n\ntype RowState = [number, number, number, number];\n\nexport const Row = ({ category: type }: RowProps) => {\n\tconst [values, setValues] = useState<RowState>([0, 0, 0, 0]);\n\tconst sum = useMemo(() => values.reduce((acc, x) => acc + x, 0), [values]);\n\n\treturn (\n\t\t<Tr>\n\t\t\t<Th>{Category[type]}</Th>\n\t\t\t{values.map((value, i) => (\n\t\t\t\t<Td key={i} contentEditable={true}>\n\t\t\t\t\t{value !== 0 ? value : ''}\n\t\t\t\t</Td>\n\t\t\t))}\n\t\t\t<Td>{sum !== 0 ? sum : ''}</Td>\n\t\t\t<Td>-</Td>\n\t\t</Tr>\n\t);\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Category } from '../Category';\nimport { Table, Td, Tr } from '../styles/table';\nimport { enumValues } from '../utils/enums';\nimport { Row } from './Row';\n\nconst categories = enumValues(Category);\n\nexport const Board = () => {\n\treturn (\n\t\t<Table>\n\t\t\t<HeaderRow />\n\t\t\t{categories.map((x) => (\n\t\t\t\t<Row key={x} category={x} />\n\t\t\t))}\n\t\t</Table>\n\t);\n};\n\nconst HeaderRow = () => {\n\treturn (\n\t\t<Tr>\n\t\t\t<NameCell colSpan={5}>Name: </NameCell>\n\t\t\t<Td>Total</Td>\n\t\t\t<Td>Points</Td>\n\t\t</Tr>\n\t);\n};\n\nconst NameCell = styled(Td)`\n\ttext-align: left;\n\tborder: none;\n`;\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function enumStrings(e: any): string[] {\n\treturn Object.keys(e).filter((key) => typeof e[key] === 'number');\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function enumValues(e: any): number[] {\n\treturn Object.keys(e)\n\t\t.filter((key) => typeof e[key] !== 'number')\n\t\t.map((x) => parseInt(x));\n}\n","import React, { useState } from 'react';\nimport styled, {\n\tThemeProvider,\n\tcss,\n\tcreateGlobalStyle,\n} from 'styled-components';\nimport { Board } from './components/Board';\nimport { darkColors } from './styles/colors';\nimport theme from 'styled-theming';\n\nfunction App() {\n\tconst [theme, setCurrentTheme] = useState<string>(\n\t\tlocalStorage.getItem('theme') ?? 'dark',\n\t);\n\n\t// const setTheme = useCallback(\n\t// \t(theme: string) => {\n\t// \t\tlocalStorage.setItem('theme', theme);\n\t// \t\tsetCurrentTheme(theme);\n\t// \t},\n\t// \t[setCurrentTheme],\n\t// );\n\n\treturn (\n\t\t<ThemeProvider theme={{ mode: theme }}>\n\t\t\t<GlobalStyle />\n\t\t\t<Main>\n\t\t\t\t<header>\n\t\t\t\t\t<H1>Balut</H1>\n\t\t\t\t</header>\n\t\t\t\t<section>\n\t\t\t\t\t<Board />\n\t\t\t\t</section>\n\t\t\t</Main>\n\t\t</ThemeProvider>\n\t);\n}\n\nexport default App;\n\nconst mainStyles = theme('mode', {\n\tdark: css`\n\t\tbackground-color: ${darkColors.backgroundColor};\n\t\tcolor: ${darkColors.color};\n\t`,\n});\n\nconst Main = styled.main`\n\t${mainStyles}\n\tpadding: 12px;\n`;\n\nconst GlobalStyle = createGlobalStyle`\n\tbody {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\t${mainStyles}\n\t}\n`;\n\nconst H1 = styled.h1`\n\tmargin: 0;\n\tfont-family: Futura;\n\tfont-size: 3em;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}